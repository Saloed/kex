#parse("definitions.vm")
import org.jetbrains.research.kex.smt.${solver.toLowerCase()}.${solver}SMTContext

import org.jetbrains.research.kex.state.predicate.NewArrayPredicate
import org.jetbrains.research.kex.state.predicate.NewPredicate

import kotlin.math.max
import java.util.concurrent.atomic.AtomicInteger
import kotlin.reflect.KClass

class VersionedMemory(val memory: Memory_, val version: Long = 0) {
    companion object {
        @Suppress("UNUSED_PARAMETER")
        fun merge(name: String, default: VersionedMemory, cases: List< Pair< Bool_, VersionedMemory >>): VersionedMemory {
            val maxVersion = cases.maxBy { it.second.version }?.second?.version ?: default.version
            return if (maxVersion == default.version) default else {
                val memories = cases.map { it.first to it.second.memory }
                VersionedMemory(Memory_.merge(default.memory, memories), maxVersion + 1)
            }
        }
    }

    fun < T : $valexpr > load(ptr: Ptr_, type: KClass< out $valexpr >) = memory.load< T >(ptr, type)

    fun < T : Dynamic_ > store(index: Ptr_, element: T): VersionedMemory {
        val newMemory = memory.store(index, element)
        return VersionedMemory(newMemory, version + 1)
    }

    operator fun get(index: Ptr_) = memory[index]
    operator fun < T : Dynamic_ > set(index: Ptr_, element: T) = store(index, element)
}

#set($self = "${solver}Context")
class $self : ${solver}SMTContext {
    companion object {
        const val MEMORY_NAME = "__memory__"
        const val PROPERTY_NAME = "__property__"
        const val TYPE_PROPERTY = "__type__"

        const val BASE_LOCAL_PTR = (1 shl 10) + 1
        const val BASE_STATIC_PTR = (1 shl 24) + 1
        const val BASE_TYPE_IDX = 100
        const val TYPE_IDX_MULTIPLIER = 10

        fun memoryName(memspace: Int) = "${ MEMORY_NAME }${ memspace }"
        fun propertyName(memspace: Int, name: String) = "${ PROPERTY_NAME }${ name }__${ memspace }"

        fun mergeContexts(name: String, default: $self, choices: Map< Bool_, $self >): $self {
            val ids = hashSetOf< String >()
            ids.addAll(default.memories.keys)
            choices.values.forEach { ctx ->
                ids.addAll(ctx.memories.keys)
            }

            val memArrays = ids.map { id ->
                val alternatives = choices.map { it.key to it.value.get(id) }
                id to VersionedMemory.merge(name, default.get(id), alternatives)
            }.toMap()

            if (choices.any { it.value.localPointer != default.localPointer }
                || choices.any { it.value.localTypes != default.localTypes }
                || choices.any { it.value.localObjPointers != default.localObjPointers }) {
                return unreachable("Incosistent local ptr info")
            }
            if (choices.any { it.value.typeIndex != default.typeIndex } || choices.any { it.value.typeMap != default.typeMap }) {
                return unreachable("Incosistent type info")
            }

            return $self(default.factory, default.localPointer, default.staticPointer, memArrays, default.localObjPointers, default.localTypes, default.typeIndex, default.typeMap)
        }

        fun create(factory: $factory) = $self(factory, BASE_LOCAL_PTR, BASE_STATIC_PTR)

    }

    val factory: $factory
    private val localPointer: AtomicInteger
    private val localObjPointers: MutableMap < Any, Int >
    private val staticPointer: AtomicInteger
    private val localTypes: MutableMap < Int, KexType >
    private val typeIndex: AtomicInteger
    private val typeMap: MutableMap< KexType, Int >
    private var initialMemories = hashMapOf< String, VersionedMemory >()
    private var memories: MutableMap< String, VersionedMemory >

    constructor(factory: $factory, localPointer: AtomicInteger, staticPointer: AtomicInteger,
                memories: Map< String, VersionedMemory >,
                localObjPointers: MutableMap < Any, Int >,
                localTypes: MutableMap< Int, KexType >,
                typeIndex: AtomicInteger, typeMap: MutableMap< KexType, Int >) {
        this.factory = factory
        this.localPointer = localPointer
        this.staticPointer = staticPointer
        this.memories = memories.toMutableMap()
        this.localObjPointers = localObjPointers
        this.localTypes = localTypes

        this.typeIndex = typeIndex
        this.typeMap = typeMap

        initialMemories[MEMORY_NAME] = VersionedMemory(factory.makeEmptyMemory(MEMORY_NAME))
    }

    constructor(factory: $factory, localPointer: Int, staticPointer: Int)
                 : this(factory, AtomicInteger(localPointer), AtomicInteger(staticPointer), mapOf(), hashMapOf(), hashMapOf(), AtomicInteger(BASE_TYPE_IDX), hashMapOf())

    constructor(ctx: $self) : this(ctx.factory, ctx.localPointer, ctx.staticPointer, ctx.memories, ctx.localObjPointers, ctx.localTypes, ctx.typeIndex, ctx.typeMap)

    constructor() : this($factory(), 0, 0)

    fun accessRawMemories() = this.memories

    private fun getInitialMemory(id: String) = initialMemories.getOrPut(id) { VersionedMemory(factory.makeEmptyMemory(id)) }
    fun getMemory(memspace: Int) = memories.getOrPut(memoryName(memspace)) { getInitialMemory(memoryName(memspace)) }
    private fun setMemory(memspace: Int, mem: VersionedMemory) { memories[memoryName(memspace)] = mem }


    private fun setProperties(memspace: Int, name: String, mem: VersionedMemory) {
        memories[propertyName(memspace, name)] = mem
    }

    fun getProperties(memspace: Int, name: String) = memories.getOrPut(propertyName(memspace, name)) {
        VersionedMemory(factory.makeEmptyMemory(propertyName(memspace, name)))
    }

    private fun get(id: String) = memories.getOrPut(id) { getInitialMemory(id) }


    fun getInitialMemory(memspace: Int) = initialMemories.getOrElse(memoryName(memspace)) { getMemory(memspace) }

    fun getInitialProperties(memspace: Int, name: String) =
        initialMemories.getOrElse(propertyName(memspace, name)) { getProperties(memspace, name) }

    fun < T : $valexpr > readMemory(ptr: Ptr_, memspace: Int, type: KClass< out $valexpr >) = getMemory(memspace).load< T >(ptr, type)

    fun < T : $valexpr > writeMemory(ptr: Ptr_, value: T, memspace: Int) {
        val mem = getMemory(memspace).store(ptr, value)
        setMemory(memspace, mem)
    }

    fun < T : $valexpr > readProperty(ptr: Ptr_, memspace: Int, name: String, type: KClass< out $valexpr >) =
            getProperties(memspace, name).load< T >(ptr, type)

    fun < T : $valexpr > writeProperty(ptr: Ptr_, memspace: Int, name: String, prop: T) {
        val mem = getProperties(memspace, name).store(ptr, prop)
        setProperties(memspace, name, mem)
    }

    @Suppress("UNUSED_PARAMETER")
    fun getLocalPtr(memspace: Int, size: TypeSize, obj: NewPredicate, type: KexType): Ptr_ {
        val ptr = localObjPointers.getOrPut(obj) { localPointer.getAndAdd(size.int) }
        localTypes[ptr] = type
        return factory.makePtrConst(ptr)
    }

    fun getLocalArray(memspace: Int, length: Int, elementSize: TypeSize, obj: NewArrayPredicate, type: KexType): Ptr_ {
        val ptr = localObjPointers.getOrPut(obj) { localPointer.getAndAdd(length * elementSize.int) }
        localTypes[ptr] = type
        return factory.makePtrConst(ptr).also {
            writeProperty(it, memspace, "length", factory.makeIntConst(length))
        }
    }

    @Suppress("UNUSED_PARAMETER")
    fun getStaticPtr(memspace: Int, size: TypeSize): Ptr_ {
        val ptr = staticPointer.getAndAdd(size.int)
        return factory.makePtrConst(ptr)
    }

    fun getStaticArray(memspace: Int, length: Int, elementSize: TypeSize): Ptr_ {
        val ptr = staticPointer.getAndAdd(length * elementSize.int)
        return factory.makePtrConst(ptr).also {
            writeProperty(it, memspace, "length", factory.makeIntConst(length))
        }
    }

    fun switchOn(name: String, contexts: Map< Bool_, ${solver}Context >): ${solver}Context {
        val merged =  mergeContexts(name, this, contexts)
        this.memories = merged.memories
        return this
    }

    fun getTypeIdx(type: KexType) = typeMap.getOrPut(type) { typeIndex.addAndGet(TYPE_IDX_MULTIPLIER) }
    fun getTypeByIdx(idx: Int): KexType? = typeMap.entries.firstOrNull { it.value == idx }?.key
    fun getTypeMapping(): Map< KexType, Int > = typeMap.toMap()

    fun readType(ptr: Ptr_, memspace: Int): Int_ = readProperty(ptr, memspace, TYPE_PROPERTY, Int_::class)
    fun writeType(ptr: Ptr_, memspace: Int, type: Int) = writeProperty(ptr, memspace, TYPE_PROPERTY, factory.makeIntConst(type))

    fun getLocalsTypeMapping() = localTypes.toMap()
}
