#parse("definitions.vm")
import org.jetbrains.research.kex.smt.${solver.toLowerCase()}.${solver}SMTMemory
import kotlin.math.min
import kotlin.reflect.KClass

private val engine = ${solver}Engine

#set($self = "${Memory}")
class $self< in Index : $Bitvector, Element : ${valexpr} >(val ctx: ContextWithIntSortSizeInfo, val type: KClass< out Element >, val inner: ${Array}< Element, Index >) : Z3SMTMemory() {
    fun < T : ${valexpr}> load(index: Index, type: KClass< out Element >) = ${valexpr}.forceCast(inner.load(index), type) as T
    fun store(index: Index, element: Element): $self< Index, Element> = $self(ctx, type, inner.store(index, element))
    operator fun set(index: Index, value: Element) = store(index, value)
    operator fun get(index: Index): Element = ${valexpr}.forceCast(inner[index], type) as Element

    companion object {
        inline fun < reified Index : $Bitvector, Element : ${valexpr}> makeDefault(ctx: ContextWithIntSortSizeInfo, name: String, default: Element, type: KClass< out Element >): $self< Index, Element > {
            val array = ${Array}.makeDefault< Element, Index>(ctx, name, default)
            return $self(ctx, type, array)
        }

        inline fun < reified Index : $Bitvector, Element : ${valexpr}> makeFree(ctx: ContextWithIntSortSizeInfo, name: String, type: KClass< out Element >): $self< Index, Element> {
            val elSort = ${valexpr}.getStaticSort(ctx, type)
            val idxSort = ${valexpr}.getStaticSort< Index>(ctx)
            val array = ${Array}.makeFree< Element, Index>(ctx, name, elSort, idxSort)
            return $self(ctx, type, array)
        }

        fun < Index : $Bitvector, Element : ${valexpr}> merge(default: $self< Index, Element>, cases: List< Pair< $Bool, $self< Index, Element>>>): $self< Index, Element> {
            check(cases.all { it.second.type == default.type }) { "Try to merge memories with different element types" }
            val inners = cases.map { it.first to it.second.inner }
            val newArray = ${Array}.merge(default.inner, inners)
            return $self(default.ctx, default.type, newArray)
        }
    }
}
